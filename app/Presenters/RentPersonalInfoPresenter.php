<?php


namespace App\Presenters;


use App\Model\Customer;
use App\Model\PriceRentCalculator;
use App\Model\Rent;
use App\Model\RentContext;
use Nette\Application\AbortException;
use Nette\Database\Connection;
use Nette\Forms\Form;
use Nette\Utils\DateTime;

class RentPersonalInfoPresenter extends BasePresenter {
    /** @var Connection @inject */
    public Connection $connection;
    private int $idHall;
    private DateTime $timeFrom;
    private DateTime $timeTo;
    private float $price;
    /** @var PriceRentCalculator  */
    private PriceRentCalculator $calculator;
    public  RentContext $context;


    public function startup() :void {
        parent::startup(); // TODO: Change the autogenerated stub
        $this->idHall = $this->getParameter('idHall');
        $this->timeFrom = DateTime::from($this->getParameter('timeFrom'));
        $this->timeTo = DateTime::from($this->getParameter('timeTo'));
        $this->price = $this->getParameter('price');
    }

    public function renderDefault(int $idHall, String $timeFrom,String $timeTo,float $price ):void {
    }

    public function createComponentPersonalInfoForm() :Form{
        $form = $this->createForm();
        $form->addText('firstName', 'Meno:')
            ->setRequired('Prosím vyplňte meno');
        $form->addText('lastName', 'Priezvisko:')
            ->setRequired('Prosím vyplňte  priezvisko');
        $form->addText('phone', 'Telefónne číslo')
            ->setEmptyValue('+42')
            ->setHtmlType('phone')
            ->setHtmlAttribute('placeholder', 'Prosím vyplňte telefónne číslo');
        $form->addEmail('email', 'Email')
            ->addRule(Form::FILLED, 'Prosím vyplňte email')
            ->addRule(Form::EMAIL, 'Email nemá správný formát');
        $form->addText('street', 'Ulica')
            ->addRule(Form::FILLED, 'Prosím vyplňte ulicu');
        $form->addText('houseNumber', 'Číslo domu')
            ->addRule(Form::FILLED, 'Prosím vyplňte číslo domu');
        $form->addText('zip', 'PSČ')
            ->addRule(Form::FILLED, 'Prosím vyplňte PSČ');
        $form->addText('city', 'Mesto')
            ->addRule(Form::FILLED, 'Prosím vyplňte mesto');
        $form->addTextArea('description', 'Dôvod prenájmu:');
        $form->addSubmit('back', 'Zrušiť')
            ->setValidationScope([])
            ->onClick[]= [$this, 'backPersonalInfoForm'];
        $form->addSubmit('submit', 'Rezervovať');
        $form->onSuccess[]=[$this, 'PersonalInfoFormSucceeded'];
        $form = $this->makeBootstrapPersonalInfo($form);
        return $form;
    }

    /**
     * @throws AbortException
     */
    public function backPersonalInfoForm():void{
        $this->redirect(':CustomerHomepage:default');
    }

    /**
     * @param Form $form
     * @throws AbortException
     */
    public function PersonalInfoFormSucceeded(Form $form): void {
        $values = $form->getValues(TRUE);
        $customer = new Customer($this->connection);
        $idCustomer = $customer->createCustomer($values['firstName'], $values['lastName'], $values['email'], $values['phone'], $values['street'], $values['houseNumber'], $values['zip'], $values['city']);
        $this->context = new RentContext();
        $this->calculator = new PriceRentCalculator();
        $rent = new Rent($this->connection, $this->calculator, $this->context);
        $rent->reserveRent($this->idHall, $this->timeFrom, $this->timeTo, $this->price, $idCustomer,$values['description'] );
        $this->flashMessage('Žiadosť o rezerváciu sály bola odoslaná, v najbižších dňoch Vás bude kontaktovať administratívny pracovník', 'success');
        $this->redirect(':CustomerHomepage:default');
    }
}